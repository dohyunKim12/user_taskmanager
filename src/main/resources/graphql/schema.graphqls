# Type definitions

type User {
    userId: ID!
    teamId: String
    username: String!
    email: String
    password: String
    role: String
}

type Team {
    teamId: ID!
    teamName: String!
}

type License {
    licenseId: ID!
    licenseType: String!
    maxVal: Int!
    currentVal: Int!
}

type TeamLicense {
    teamLicenseId: ID!
    teamId: String!
    licenseId: String!
}

type UserTask {
    userTaskId: ID!
    jobId: Int
    shortCmd: String
    userId: String!
    username: String
    submittedAt: String!
    startedAt: String
    endedAt: String
    status: String!
    userTaskDetail: UserTaskDetail!
}

type AddBatchOutput {
    success: [String]
    failed: [String]
    permissionDenied: [String]
}

input UserTaskDetailInput {
    command: String!
    partition: String!
    licenseType: String!
    licenseCount: Int!
    directory: String
    uuid: String!
    timelimit: Float!
    requestedCpu: Float!
    requestedMem: Float!
}

type UserTaskDetail {
    userTaskId: ID!
    command: String!
    partition: String!
    licenseType: String!
    licenseCount: Int!
    directory: String
    uuid: String!
    timelimit: Float!
    requestedCpu: Float!
    requestedMem: Float!
}

input TaskFilterInput {
    statuses: [String]
    usernames: [String]
    partitions: [String]
    licenseTypes: [String]
    cpuRange: [String]
    memRange: [String]
    submittedFrom: String
    submittedTo: String
    startedFrom: String
    startedTo: String
    endedFrom: String
    endedTo: String
}

type Result {
    success: Boolean
    message: String
}

# Query types

type Query {
    getUser(userId: ID!): User
    getUserByUsername(username: String!): User
    getAllUsers: [User]
    getTeam(teamId: ID!): Team
    getAllTeams: [Team]
    getLicense(licenseId: ID!): License
    getAllLicenses: [License]
    getUserTask(userTaskId: ID!): UserTask
    getAllUserTasks: [UserTask]
    getFilteredUserTasks(filters: TaskFilterInput): [UserTask]
}

# Mutation types

type Mutation {
    createUser(teamId: String, username: String!, password: String, email: String!, role: String): User
    updateUser(userId: ID!, teamId: String, username: String, email: String, role: String): User
    deleteUserById(userId: ID!): Result
    deleteUserByUsername(username: String!): Result

    createTeam(teamName: String!): Team
    updateTeam(teamId: ID!, teamName: String): Team
    updateTeamLicense(teamId: ID!, licenseTypes: [String]): Result
    deleteTeam(teamId: ID!): Result

    createLicense(licenseType: String!, maxVal: Int!, currentVal: Int!): License
    updateLicense(licenseId: ID!, licenseType: String, maxVal: Int, currentVal: Int): License
    deleteLicenseById(licenseId: ID!): Result
    deleteAllLicenses: Result

    assignLicenseToTeam(teamId: ID!, licenseId: ID!): TeamLicense
    removeLicenseFromTeam(teamId: ID!, licenseId: ID!): Result

    # Currently add userId in this field, but it should be removed in the future(after adding authentication)
    # User info will be retrieved from the Principal object
    createUserTask(userId: ID!, detail: UserTaskDetailInput!): UserTask
    addBatch(userId: ID!, detail: [UserTaskDetailInput]!): AddBatchOutput
    deleteUserTask(userTaskId: ID!): Result
#    updateUserTask(userTaskId: ID!, jobId: Int, shortCmd: String, userId: ID, submittedAt: String, startedAt: String, endedAt: String, status: String): UserTask
}
